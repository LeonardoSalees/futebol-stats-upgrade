generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "rhel-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Round {
  id        Int      @id @default(autoincrement())
  name      String   // Nome ou identificação da rodada, pode ser uma data, número da temporada, etc.
  date      DateTime @default(now()) // Data e hora em que a rodada foi criada
  games     Game[]   // Relacionamento com os jogos da rodada
  teams     Team[]
  finished  Boolean  @default(false) // Indica se a rodada foi encerrada
}

model Player {
  id           Int             @id @default(autoincrement())
  name         String @unique
  isAvailable Boolean @default(false)
  team     String?         // opcional
  goals        Goal[]
  assists      Assist[]
  gameStats    Game[]          // relaciona com os jogos que o jogador participou
  gamePlayers  GamePlayer[]    // adicione esta linha para relação inversa
  playerTeams  PlayerOnTeam[]  // jogadores no sorteio
}

model Game {
  id          Int        @id @default(autoincrement())
  roundId     Int
  round       Round      @relation(fields: [roundId], references: [id])
  date        DateTime   @default(now())
  homeTeam    String
  awayTeam    String
  homeScore   Int        @default(0) // Placar do time da casa
  awayScore   Int        @default(0) // Placar do time visitante
  goals       Goal[]
  assists     Assist[]
  players     GamePlayer[] // jogadores no jogo
  gameStats   Player[]    // adicione esta linha para relação inversa
  finished    Boolean     @default(false)
  started     Boolean     @default(false)
  startedAt   DateTime?   // momento do início do jogo
  time        Int        @default(0) // tempo do jogo em segundos
}

model GamePlayer {
  id         Int     @id @default(autoincrement())
  gameId     Int
  playerId   Int
  team  String  // cor do colete naquele jogo

  game       Game    @relation(fields: [gameId], references: [id])
  player     Player  @relation(fields: [playerId], references: [id])
}


model Goal {
  id        Int      @id @default(autoincrement())
  playerId  Int      // Jogador que marcou o gol
  gameId    Int      // Jogo em que o gol foi marcado
  team String   // o time pelo qual o jogador marcou
  minute    Int      // Minuto em que o gol foi marcado

  player    Player   @relation(fields: [playerId], references: [id])
  game      Game     @relation(fields: [gameId], references: [id])
}

model Assist {
  id        Int      @id @default(autoincrement())
  playerId  Int      // Jogador que deu a assistência
  gameId    Int      // Jogo em que a assistência foi feita
  minute    Int      // Minuto da assistência
  team String   // o time pelo qual o jogador marcou

  player    Player   @relation(fields: [playerId], references: [id])
  game      Game     @relation(fields: [gameId], references: [id])
}

model Team {
  id       Int             @id @default(autoincrement())
  roundId  Int
  name     String          // "verde", "vermelho", etc.
  round    Round           @relation(fields: [roundId], references: [id])
  players  PlayerOnTeam[]
}

model PlayerOnTeam {
  id        Int     @id @default(autoincrement())
  playerId  Int
  teamId    Int

  player    Player  @relation(fields: [playerId], references: [id])
  team      Team    @relation(fields: [teamId], references: [id])
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}